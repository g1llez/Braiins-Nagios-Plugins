#!/bin/bash

# Get the current script path
scriptPath=$(dirname $BASH_SOURCE[0])

# Temperature trigger
effWarning=$4
effCritical=$5

Service="EFFICIENCY"

# Authentification
<<<<<<< HEAD
auth=$(grpcurl -plaintext -v -d  '{"username": "'$2'", "password": "'$3'"}' $1:50051 'braiins.bos.v1.AuthenticationService/Login' 2>/dev/null)
=======
auth=$($scriptPath/grpcurl -plaintext -v -d  '{"username": "'$2'", "password": "'$3'"}' $1:50051 'braiins.bos.v1.AuthenticationService/Login' 2>/dev/null)
>>>>>>> 1fb5a09db34020214fecf947dd99185302a1de6b

# Check if we successfully authenticate
retVal=$?
if [[ $retVal -eq 0 ]]; then

   # Get the current toker
   token=$(echo -e "$auth" | grep 'authorization:' | awk '{print $2}')
   
   # Get the Performance and Tuner info
<<<<<<< HEAD
   tunerinfo=$(grpcurl -plaintext -H 'authorization:'$token'' $1:50051 'braiins.bos.v1.PerformanceService/GetTunerState')
   boardsinfo=$(grpcurl -plaintext -H 'authorization:'$token'' $1:50051 'braiins.bos.v1.MinerService/GetHashboards')
=======
   tunerinfo=$($scriptPath/grpcurl -plaintext -H 'authorization:'$token'' $1:50051 'braiins.bos.v1.PerformanceService/GetTunerState')
   boardsinfo=$($scriptPath/grpcurl -plaintext -H 'authorization:'$token'' $1:50051 'braiins.bos.v1.MinerService/GetHashboards')
>>>>>>> 1fb5a09db34020214fecf947dd99185302a1de6b
   
   # Extract the hashrate for all the boards
   b1_5m_hash=$(echo $boardsinfo | jq '.hashboards[0].stats.realHashrate.last5m.gigahashPerSecond' )
   b2_5m_hash=$(echo $boardsinfo | jq '.hashboards[1].stats.realHashrate.last5m.gigahashPerSecond' )
   b3_5m_hash=$(echo $boardsinfo | jq '.hashboards[2].stats.realHashrate.last5m.gigahashPerSecond' )
   total_5m=$(echo ${b1_5m_hash} + ${b2_5m_hash} + ${b3_5m_hash} | bc)
   
   # Extract the power data
   watt=$(echo $tunerinfo | jq '.powerTargetModeState.profile.estimatedPowerConsumption.watt' | tr -d '"')
   watt=$((watt*1000))

   # Calculate efficiency
   efficiency=$( printf "%.1f" $(echo "scale=2; ${watt} / ${total_5m}" | bc ) )
   
   if [[ $hash == *"ERROR"* ]]; then
      echo "$Service UNKNOWN - Error getting information"
      retVal=3
   else
      # Return the informations
	  status="OK"
	  statusCode=0
	  if [[ $efficiency > $effCritical ]]; then
	     status="CRITICAL"
		 statusCode=2
	  elif [[ ( $efficiency > $effWarning ) ]]; then
	     status="WARNING"
		 statusCode=1
	  fi
<<<<<<< HEAD
      echo "$Service $status - Efficiency: $efficiency J/TH | efficiency=$efficiency"
=======
      echo "$Service $status - Efficiency: $efficiency J/TH | efficiency=$efficiency "
>>>>>>> 1fb5a09db34020214fecf947dd99185302a1de6b
      retVal=$statusCode
   fi
   
else
   echo "$Service UNKNOWN - Authentification failed for user '$2'"
   retVal=3
fi
exit $retVal